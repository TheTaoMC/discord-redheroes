const { getKarma } = require("../utils/wallet");
const {
  generateHardMathQuestion,
  generateWordGuessChallenge,
} = require("../utils/generators");

const WORK_COOLDOWN = 10 * 1000; // 10 seconds
const CHALLENGE_TIMEOUT = 60 * 1000; // 60 seconds
const LOW_KARMA_THRESHOLD = 20;

const workCooldowns = new Map();

module.exports = {
  name: "1work",
  globalMathChallengeRef: { value: null }, // Global challenge reference
  challengeTimeout: null, // Timeout for clearing the challenge

  execute(message) {
    const userId = message.author.id;
    const now = Date.now();
    const lastUsed = workCooldowns.get(userId) || 0;

    // Check cooldown
    if (now - lastUsed < WORK_COOLDOWN) {
      const remainingTime = Math.ceil(
        (WORK_COOLDOWN - (now - lastUsed)) / 1000
      );
      return message.reply(`‚è≥ ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏≠‡∏µ‡∏Å ${remainingTime} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
    }
    workCooldowns.set(userId, now);

    // Check if there's an existing global challenge
    if (this.globalMathChallengeRef.value) {
      return message.reply(
        "üß† ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß! ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ .answer ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"
      );
    }

    // Check karma and notify user about low karma chance
    const karma = getKarma(userId);
    let warningMessage = "";
    if (karma < LOW_KARMA_THRESHOLD) {
      //warningMessage = `\n‚ö†Ô∏è Karma ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (${karma}) ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•`;
    }

    // Generate challenge
    let question, answer, challengeType;
    try {
      challengeType = Math.random() < 0.5 ? "math" : "word";
      ({ question, answer } =
        challengeType === "math"
          ? generateHardMathQuestion()
          : generateWordGuessChallenge());
    } catch (error) {
      console.error("‚ùå Error generating challenge:", error);
      return message.reply(
        "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
      );
    }

    // Store global challenge
    this.globalMathChallengeRef.value = {
      answer: answer.toString().toLowerCase(),
      type: challengeType,
      askedBy: userId,
      createdAt: now,
    };

    // Set timeout to clear the challenge
    if (this.challengeTimeout) clearTimeout(this.challengeTimeout); // Clear any existing timeout
    this.challengeTimeout = setTimeout(() => {
      if (this.globalMathChallengeRef.value) {
        this.globalMathChallengeRef.value = null;
        message.channel.send(
          `‚è≥ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á \`.work\``
        );
      }
    }, CHALLENGE_TIMEOUT);

    // Notify user about the challenge and karma warning
    return message.channel.send(
      `üéÆ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${
        challengeType === "math" ? "‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå" : "‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≥"
      }\n${question}\n‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: .answer ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö${warningMessage}`
    );
  },
};
