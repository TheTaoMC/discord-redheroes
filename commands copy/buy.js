const db = require("../db");
const { getBalance, addBalance, updateKarma } = require("../utils/wallet");
const itemEffects = require("../utils/itemeffect");

module.exports = {
  name: "buy",
  async execute(message, args) {
    try {
      // Step 1: Parse the item ID from the command arguments
      const itemId = parseInt(args[0]);

      if (!itemId || isNaN(itemId)) {
        return message.reply(
          "‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô `.buy 1`"
        );
      }

      // Step 2: Fetch the item details from the database
      const item = db.prepare("SELECT * FROM items WHERE id = ?").get(itemId);

      if (!item) {
        return message.reply("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤");
      }

      // Step 3: Check if the user has enough balance to buy the item
      const userId = message.author.id;
      const userBalance = getBalance(userId);

      if (userBalance < item.price) {
        return message.reply(`‚ùå ‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠ ${item.name}`);
      }

      // Step 4: Deduct the money from the user's wallet
      addBalance(userId, -item.price);

      // Notify the user of success
      let responseMessage = `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ã‡∏∑‡πâ‡∏≠ ${
        item.name
      } ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${getBalance(userId)} ‡∏ö‡∏≤‡∏ó`;

      // Step 5: Check if the item should be used immediately (auto_use = 'Y')
      if (item.auto_use === "Y") {
        const useResult = itemEffects.useItem(item.id, userId, { updateKarma });

        if (useResult.success) {
          if (useResult.reaction) {
            // Add a reaction to the message
            await message.react(useResult.reaction);
          } else {
            responseMessage += `\n${useResult.message}`;
          }
        } else {
          responseMessage += `\n‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ: ${useResult.message}`;
        }
      } else {
        // If auto_use = 'N', add the item to the inventory
        db.prepare(
          "INSERT OR REPLACE INTO user_inventory (user_id, item_id, quantity) VALUES (?, ?, COALESCE((SELECT quantity FROM user_inventory WHERE user_id = ? AND item_id = ?), 0) + 1)"
        ).run(userId, item.id, userId, item.id);

        responseMessage += `\nüì¶ ‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ${item.name} ‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`;
      }

      // Step 6: Send the final response message to the user
      return message.reply(responseMessage);
    } catch (error) {
      console.error("‚ùå Error processing buy command:", error);
      return message.reply(
        "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
      );
    }
  },
};
