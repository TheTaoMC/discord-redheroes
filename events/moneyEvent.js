const cron = require("node-cron");
const { EmbedBuilder } = require("discord.js");

module.exports = {
  name: "moneyEvent",
  description: "Event ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß",

  // Function to start the cron job
  start(client, db) {
    // Schedule the money event to run every hour using node-cron
    cron.schedule("0 * * * *", async () => {
      console.log("‚è∞ Running money event...");
      await this.execute(client, db);
    });
  },

  // Main execution function for the event
  async execute(client, db) {
    // Get the room from the database
    const room = await getRoom(db);
    if (!room) {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á Event!");
      return;
    }

    const channel = client.channels.cache.get(room.room_id); // Get the channel by room_id
    if (!channel) {
      console.log(
        `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ä‡πÅ‡∏ô‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á ${room.room_name} (${room.room_id})!`
      );
      return;
    }

    // Get the top 3 users with the highest balance
    const topUsers = await getTopUsers(db, 3);
    if (topUsers.length === 0) {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Event ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏á‡∏¥‡∏ô!");
      return;
    }

    // Randomly select one user from the top 3
    const randomIndex = Math.floor(Math.random() * topUsers.length);
    const selectedUser = topUsers[randomIndex];

    // Calculate money loss (1-30% of balance)
    const percentageLoss = Math.floor(Math.random() * 2) + 1; // 1-30%
    const moneyLost = Math.floor((selectedUser.balance * percentageLoss) / 100);

    if (moneyLost <= 0) {
      console.log(
        `‚ùå ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ${selectedUser.user_id} ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ!`
      );
      return;
    }

    // Notify the first message in the channel
    const embed1 = new EmbedBuilder()
      .setTitle("üö® ‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå!")
      .setDescription(
        `<@${selectedUser.user_id}> ‡πÑ‡∏î‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô \`${moneyLost}\` ‡∏ö‡∏≤‡∏ó ‡∏´‡∏≤‡∏¢...`
      )
      .setColor("#FF4500")
      .setImage("https://media.giphy.com/media/eiGVH5B6QtRbWKyZy4/giphy.gif") // Add direct GIF URL here
      .setTimestamp();

    channel.send({ embeds: [embed1] });

    // Deduct money from the selected user
    db.run("UPDATE users SET balance = balance - ? WHERE user_id = ?", [
      moneyLost,
      selectedUser.user_id,
    ]);

    // Get other users (rank 4 and below)
    const otherUsers = await getOtherUsers(
      db,
      topUsers.map((user) => user.user_id)
    );
    if (otherUsers.length === 0) {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ!");
      return;
    }

    // Randomly select one user to receive the lost money
    const randomRecipientIndex = Math.floor(Math.random() * otherUsers.length);
    const recipientUser = otherUsers[randomRecipientIndex];

    // Add money to the recipient's balance
    db.run("UPDATE users SET balance = balance + ? WHERE user_id = ?", [
      moneyLost,
      recipientUser.user_id,
    ]);

    // Notify the second message in the channel
    const embed2 = new EmbedBuilder()
      .setTitle("üçú ‡πÄ‡∏à‡∏≠‡πÄ‡∏á‡∏¥‡∏ô!")
      .setDescription(
        `???: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¥‡∏ß‡∏Ç‡πâ‡∏≤‡∏ß‡∏û‡∏≠‡∏î‡∏µ‡πÄ‡∏•‡∏¢ ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏Ñ‡∏£‡∏Å‡πá‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ \`${moneyLost}\` ‡∏ö‡∏≤‡∏ó ‡∏™‡∏ö‡∏≤‡∏¢‡πÄ‡∏•‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ!"\n\n*‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏´‡∏ô‡∏Å‡∏±‡∏ô‡∏ô‡∏∞?*`
      )
      .setColor("#32CD32")
      .setImage(
        "https://giphy.com/gifs/MindblowonUniverse-mindblown-mindblowon-mindblowonuniverse-Ip6U2lm8FeSs4zPht3/giphy.gif"
      ) // Add direct GIF URL here
      .setTimestamp();

    channel.send({ embeds: [embed2] });
  },
};

// Helper function to fetch the room from the database
async function getRoom(db) {
  return new Promise((resolve, reject) => {
    db.get("SELECT * FROM rooms LIMIT 1", [], (err, row) => {
      if (err) {
        console.error("‚ùå Error fetching room:", err.message);
        reject(err);
      }
      resolve(row || null);
    });
  });
}

// Helper function to fetch top users by balance
async function getTopUsers(db, limit) {
  return new Promise((resolve, reject) => {
    db.all(
      "SELECT * FROM users ORDER BY balance DESC LIMIT ?",
      [limit],
      (err, rows) => {
        if (err) {
          console.error("‚ùå Error fetching top users:", err.message);
          reject(err);
        }
        resolve(rows || []);
      }
    );
  });
}

// Helper function to fetch other users (excluding top users)
async function getOtherUsers(db, excludedUserIds) {
  return new Promise((resolve, reject) => {
    const placeholders = excludedUserIds.map(() => "?").join(",");
    const query = `SELECT * FROM users WHERE user_id NOT IN (${placeholders}) AND balance > 0`;
    db.all(query, excludedUserIds, (err, rows) => {
      if (err) {
        console.error("‚ùå Error fetching other users:", err.message);
        reject(err);
      }
      resolve(rows || []);
    });
  });
}
