const { EmbedBuilder } = require("discord.js");

module.exports = {
  name: "transfer",
  description: "‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô",
  async execute(message, args, { client, db }) {
    const userId = message.author.id;
    const targetUser = message.mentions.users.first();

    // Check if a user is mentioned
    if (!targetUser) {
      return message.reply("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ó‡πá‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô!");
    }

    const targetUserId = targetUser.id;

    // Prevent transferring to yourself
    if (userId === targetUserId) {
      return message.reply("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ!");
    }

    // Validate the amount
    const amount = parseInt(args[1]);
    if (isNaN(amount) || amount <= 0) {
      return message.reply(
        "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0)"
      );
    }

    // Ensure both users exist in the database
    await ensureUserData(db, userId);
    await ensureUserData(db, targetUserId);

    // Fetch user data from the database
    const userRow = await getUserData(db, userId);
    const targetRow = await getUserData(db, targetUserId);

    // Check if the sender has enough balance
    if (userRow.balance < amount) {
      return message.reply("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô!");
    }

    // Perform the transfer
    db.run("UPDATE users SET balance = balance - ? WHERE user_id = ?", [
      amount,
      userId,
    ]);
    db.run("UPDATE users SET balance = balance + ? WHERE user_id = ?", [
      amount,
      targetUserId,
    ]);

    // Notify via DM
    try {
      const sender = await client.users.fetch(userId);
      const receiver = await client.users.fetch(targetUserId);

      // Send DM to the sender
      sender.send(
        `üí∏ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô \`${amount}\` ‡∏ö‡∏≤‡∏ó ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö ${receiver.username}`
      );

      // Send DM to the receiver
      receiver.send(
        `üí∏ ${sender.username} ‡πÑ‡∏î‡πâ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô \`${amount}\` ‡∏ö‡∏≤‡∏ó ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì`
      );
    } catch (error) {
      console.error("‚ùå Error sending DM:", error.message);
    }

    // Notify in the channel
    const embed = new EmbedBuilder()
      .setTitle("üí∏ ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
      .setDescription(
        `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô \`${amount}\` ‡∏ö‡∏≤‡∏ó ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö ${targetUser.username}`
      )
      .addFields(
        {
          name: "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
          value: `\`${userRow.balance - amount}\` ‡∏ö‡∏≤‡∏ó`,
          inline: true,
        },
        {
          name: "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö",
          value: `\`${targetRow.balance + amount}\` ‡∏ö‡∏≤‡∏ó`,
          inline: true,
        }
      )
      .setColor("#2ECC71")
      .setTimestamp();

    // Delete the original command message
    try {
      await message.delete(); // Delete the input message
    } catch (error) {
      console.error("‚ùå Error deleting the input message:", error.message);
    }

    // Send the result as an embed
    //message.channel.send({ embeds: [embed] });
  },
};

// Helper function to ensure user data exists in the database
async function ensureUserData(db, userId) {
  return new Promise((resolve, reject) => {
    db.get("SELECT * FROM users WHERE user_id = ?", [userId], (err, row) => {
      if (err) {
        console.error("‚ùå Error fetching user data:", err.message);
        return reject(err);
      }

      if (!row) {
        // Insert default user data if not exists
        db.run(
          "INSERT INTO users (user_id, username, balance, karma) VALUES (?, ?, ?, ?)",
          [userId, "Unknown", 0, 0],
          (insertErr) => {
            if (insertErr) {
              console.error("‚ùå Error inserting user data:", insertErr.message);
              return reject(insertErr);
            }
            resolve();
          }
        );
      } else {
        resolve();
      }
    });
  });
}

// Helper function to fetch user data
async function getUserData(db, userId) {
  return new Promise((resolve, reject) => {
    db.get("SELECT * FROM users WHERE user_id = ?", [userId], (err, row) => {
      if (err) {
        console.error("‚ùå Error fetching user data:", err.message);
        reject(err);
      }
      resolve(row || { balance: 0, karma: 0 });
    });
  });
}
