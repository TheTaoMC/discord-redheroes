setroom
[เริ่ม]
  ↓
input .setroom #room
  ↓
ถ้าไม่เคย setroom ใช้ได้ทุกห้อง
      ↓
ตรวจสอบ ผู้สั่ง เป็นแอดมิน
  ├── ใช่ → ตรวจสอบ room_id ถ้าซ้ำ
  └── ไม่ → แจ้งว่านี้ไม่ใช่แอดมิน
      ↓
ตรวจสอบ room_id ถ้าซ้ำ
  ├── ใช่ → อัพเดท ชื่อห้อง, idห้อง ลง database 
  └── ไม่ → ตรวจสอบ ห้อง text
      ↓
ตรวจสอบ ห้อง text
  ├── ใช่ → บันทึก ชื่อห้อง, idห้อง ลงdatabase
  └── ไม่ → แจ้งว่านี้ไม่ใช่ ห้องtext
      ↓
[จบ]
***************************************************************************************


listroom
[เริ่ม]
  ↓
input .listroom
  ↓
แสดง ชื่อห้องทั้งหมด
  ↓
Room ID | Room Name 
id1     | name1     
id2     | name2     
[จบ]
***************************************************************************************

delroom
[เริ่ม]
  ↓
input .delroom #room
      ↓
ตรวจสอบ ผู้สั่ง เป็นแอดมิน
  ├── ใช่ → ตรวจสอบ room_id
  └── ไม่ → แจ้งว่านี้ไม่ใช่แอดมิน
      ↓
ตรวจสอบ room_id
  ├── ใช่ → ลบ room นั้นออกจาก database 
  └── ไม่ → แจ้งว่าไม่มีห้องนี้ ในระบบ
[จบ]
***************************************************************************************

work และ answer
[เริ่ม]
  ↓
input .work
      ↓
ตรวจสอบ ว่าคนอื่นเคย .work หรือไม่ work 1 ครั้ง ใข้รวมกันทั้งห้อง ถ้ามีการ work แล้ว คนอื่นจะwork ไม่ได้ แต่ตอบได้ ใครตอบถูกได้รับรางวัลไป
  ├── ไช่ → แจ้งว่ายังมีงานเก่าอยู่ 
    └──ต้อง .answer ก่อน หรือรอ work หมดอายุ ใน 1 นาที
  └── ไม่ → แสดงงาน
      ↓
ตรวจสอบ ว่าเคย work ไปก่อนหน้านี้ เกิน 15 วินาที
  ├── ไช่ → แจ้งว่า work ถี่เกินไป
  └── ไม่ → ตรวจสอบ ว่าคนอื่นเคย .work หรือไม่
      ↓
สุ่มงานที่ได้ 
  ├── 1เกมคำนวนเลย ตัวอย่าง (7*85)+84 = ? สุ่มโจทย์คำนวณ ที่คำตอบเป็น จำเต็มอย่างเดียว
  └── 2เกมท้ายคำศัพท์ EN ตัวอย่าง C.t คำใบ้ แมว - ? มีไฟล์อยู่ใน ../utils/wordList.js  { word: "cat", hint: "c.t", meaning: "แมว" },
      ↓
ตอบคำถามถูก
      ↓
สุ่มเงินรางวัล
      ↓
      1-10 บาท โอกาส 80 %
      11-30 บาท โอกาส 10 %
      31-50 บาท โอกาส 5 %
      51-80 บาท โอกาส 2 % 
      81-100 บาท โอกาส 2 %  คนที่ได้มากกว่า 80 บาท ขึ้น จะมีแจ้งว่าได้รางวัลสูง แล้วมี gif แสดงในข้อความแจ้งด้วย
      101-150 บาท โอกาส 1 % 
      ↓
บันทึก ข้อมูล เงินที่ได้ และ karma+1 ลงใน database user
[จบ]
***************************************************************************************

answer
[เริ่ม]
  ↓
input .answer <คำตอบ>
  ↓
ตรวจสอบว่ามีงานในห้องนี้หรือไม่
  ├── มี → ดำเนินการต่อ
  └── ไม่มี → แจ้งเตือนและหยุดการทำงาน
        ↓
ตรวจสอบค่า Karma ของผู้ใช้งาน
  ├── karma >= 0 → ดำเนินการปกติ (ตอบถูกได้รางวัล)
  ├── karma < 0 → มีโอกาส 50% ตอบถูกแต่ไม่ได้รับรางวัล
  ├── karma < -5 → มีโอกาส 70% ตอบถูกแต่ไม่ได้รับรางวัล
  ├── karma < -10 → มีโอกาส 90% ตอบถูกแต่ไม่ได้รับรางวัล
  ├── karma < -15 → มีโอกาส 90% ตอบถูกแต่ไม่ได้รับรางวัล และ 50% เสียเงิน 20% ของกระเป๋า
  ├── karma < -20 → ตอบถูกแต่ไม่ได้รับรางวัล และ 80% เสียเงิน 30% ของกระเป๋า
  └── karma < -25 → ไม่สามารถตอบคำถามได้
        ↓
ตรวจสอบค่า Karma ของผู้ใช้งาน
  ├── karma >= 0 → ดำเนินการปกติ (ตอบถูกได้รางวัล)
  ├── karma > 10 → มีโอกาส 30% รับรางวัล *2
  ├── karma > 20 → มีโอกาส 30% รับรางวัล *2
  ├── karma > 30 → มีโอกาส 30% รับรางวัล *2
  ├── karma > 40 → มีโอกาส 40% รับรางวัล *2
  ├── karma > 50 → มีโอกาส 50% รับรางวัล *2
  ├── karma > 60 → มีโอกาส 60% รับรางวัล *2
  ├── karma > 70 → มีโอกาส 70% รับรางวัล *2 หรือ 60% รับรางวัล *3
  ├── karma > 80 → มีโอกาส 70% รับรางวัล *2 หรือ 60% รับรางวัล *3
  └── karma > 90 → มีโอกาส 70% รับรางวัล *2 หรือ 60% รับรางวัล *3
        ↓
ตรวจสอบคำตอบ
  ├── ถูกต้อง → ดำเนินการตามเงื่อนไข Karma
  └── ไม่ถูกต้อง → แจ้งเตือนและหยุดการทำงาน
        ↓
[จบ]
***************************************************************************************

balance
[เริ่ม]
  ↓
input .balance
  ↓
DM แสดง จำนวนเงิน , karma และ ไอเทมในกระเป๋าที่เป็น  offensive, auto_use = Y และ defensive, auto_use = Y จำนวนไอเทม(quantity)
  ↓
message.react("✅") ที่ input .balance
[จบ]
***************************************************************************************

top
[เริ่ม]
  ↓
input .top
  ↓
แสดง รายชื่อผู้มีเงินเยอะที่สุดตามลำดับ 
  └── 3 ราย
  ↓
แสดง รายชื่อผู้มี karma เยอะที่สุดตามลำดับ 
  └── 3 ราย
  ↓
[จบ]
***************************************************************************************

steal
[เริ่ม]
  ↓
input .steal @user
  ↓
ตรวจ steal ได้วันละ 5 ครั้งต่อวัน
  ├── ครบ → แจ้งเตือนและหยุดการทำงาน
  └── ไม่ครบ → ดำเนินการต่อ
        ↓
ตรวจสอบว่าผู้ใช้งาน (ทั้งผู้ขโมยและผู้ถูกขโมย) มีข้อมูลในตาราง users หรือไม่
  ├── มี → ดำเนินการต่อ
  └── ไม่มี → เพิ่มข้อมูลเริ่มต้น (balance = 0, karma = 0, username = Discord Username)
        ↓
ตรวจสอบ item ผู้ steal (offensive, auto_use = Y)
  ├── มี → โหลด Effect จากไฟล์และใช้งาน
      └── หัก item ผู้ steal เสมอ (เช่น stealx2)
          └── หากไม่มีไอเท็มเหลือ → แจ้งเตือน
  └── ไม่มี → ใช้ค่าเริ่มต้น (โอกาสขโมย 50%, เงินขโมยได้ 1-30%)
        ↓
ตรวจสอบ item ผู้ถูก steal (defensive, auto_use = Y)
  ├── มี → โหลด Effect จากไฟล์และใช้งาน
      └── หัก item ผู้ถูก steal ด้วย (เช่น lock)
          └── หากไม่มีไอเท็มเหลือ → แจ้งเตือน
  └── ไม่มี → ดำเนินการต่อ
        ↓
ขโมยสำเร็จ // โอกาสขึ้นอยู่กับไอเท็ม offensive และ defensive
  ├── ใช่ → ขโมยสำเร็จ
    ├── ขโมยได้ไม่เกิน 30% ของผู้ถูกขโมย (ปรับตามไอเท็ม offensive)
    └── สุ่ม 1-30% ด้วย (ปรับตามไอเท็ม offensive)
  └── ไม่ → ขโมยไม่สำเร็จ
        ↓
ขโมยสำเร็จหรือไม่ karma จะ -5
  ↓
[จบ]
***************************************************************************************

shop
[เริ่ม]
  ↓
  input .shop
  ↓
  รายการไอเทม
  no | price | description
[จบ]
***************************************************************************************

buy
[เริ่ม]
  ↓
input .buy no
  ↓
ตรวจสอบหมายเลขไอเท็ม
  ├── มี → ดำเนินการต่อ
  └── ไม่มี → แจ้งเตือนว่า "ไม่มีไอเท็มนี้ในร้านค้า"
        ↓
ตรวจสอบยอดเงินผู้ใช้งาน
  ├── เพียงพอ → ดำเนินการต่อ
  └── ไม่เพียงพอ → แจ้งเตือนว่า "เงินไม่พอ!"
        ↓
ตรวจสอบประเภทไอเท็ม
  ├── Offensive และ auto_use = N → เพิ่มผลตามไอเท็มทันทีที่ซื้อ
  ├── Offensive และ auto_use = Y → เก็บเข้ากระเป๋า
  ├── Defensive และ auto_use = Y → เก็บเข้ากระเป๋า
  └── อื่น ๆ → เก็บเข้ากระเป๋า
        ↓
หักเงินและบันทึกไอเท็มเข้ากระเป๋า
  ↓
[จบ]
***************************************************************************************

transfer
[เริ่ม]
  ↓
input .transfer @user <amount>
  ↓
ตรวจสอบว่าผู้ใช้งานได้แท็กผู้เล่นอื่นและใส่จำนวนเงินที่ถูกต้อง
  ├── ถูกต้อง → ดำเนินการต่อ
  └── ไม่ถูกต้อง → แจ้งเตือนและหยุดการทำงาน
        ↓
ตรวจสอบว่าผู้ใช้งาน (ผู้โอน) มีเงินเพียงพอในบัญชี
  ├── มี → ดำเนินการต่อ
  └── ไม่มี → แจ้งเตือนและหยุดการทำงาน
        ↓
หักเงินจากบัญชีผู้โอน และเพิ่มเงินให้บัญชีผู้รับ
  ↓
อัปเดตข้อมูลในฐานข้อมูล
  ↓
ส่ง DM แจ้งเตือนทั้งผู้โอนและผู้รับ
  ├── ส่ง DM ไปหาผู้โอน: "คุณได้โอนเงินจำนวน XX บาท ให้กับ [ชื่อผู้รับ]"
  └── ส่ง DM ไปหาผู้รับ: "[ชื่อผู้โอน] ได้โอนเงินจำนวน XX บาท ให้คุณ"
        ↓
แจ้งผลลัพธ์การโอนเงินในแชแนล
  ↓
[จบ]
***************************************************************************************

coinflip
[เริ่ม]
  ↓
input .coinflip [h/t] <amount>
  ↓
ตรวจสอบว่าผู้ใช้งานใส่เดิมพันและจำนวนเงินที่ถูกต้อง
  ├── ถูกต้อง → ดำเนินการต่อ
  └── ไม่ถูกต้อง → แจ้งเตือนและหยุดการทำงาน
        ↓
ตรวจสอบว่าผู้ใช้งานมีเงินเพียงพอในบัญชี
  ├── มี → ดำเนินการต่อ
  └── ไม่มี → แจ้งเตือนและหยุดการทำงาน
        ↓
ระบบสุ่มผลหัวหรือก้อย
  ↓
เปรียบเทียบผลกับการเดิมพันของผู้ใช้งาน
  ├── ถูกต้อง → เพิ่มเงินรางวัลให้ผู้ใช้งาน, karma -1
  └── ผิด → หักเงินเดิมพัน, karma -1
        ↓
แจ้งผลลัพธ์ในแชแนล
  ↓
[จบ]
***************************************************************************************

daily
[เริ่ม]
  ↓
input .daily
  ↓
ตรวจสอบ cooldown (1 ชั่วโมง)
  ├── ครบ → ดำเนินการต่อ
  └── ไม่ครบ → แจ้งเวลาที่เหลือ
        ↓
สุ่มรางวัลตามโอกาสที่กำหนด:
  ├── 1-50 บาท (80%)
  ├── 51-100 บาท (10%)
  ├── 101-150 บาท (5%)
  ├── 151-200 บาท (3%)
  ├── 201-250 บาท (2%)
  └── 251-300 บาท (1%)
        ↓
มอบรางวัลและรีเซ็ต cooldown
  ↓
แจ้งผลลัพธ์ในแชแนล
  ↓
[จบ]
***************************************************************************************

buybox, ach, ach sell, ach buy
[เริ่ม]
  ↓
input .buybox
  ↓
ตรวจสอบ cooldown (ถ้ามี)
  ├── ครบ → สุ่มไอเท็มจากกล่องสุ่มและเพิ่มลงในกระเป๋าผู้ใช้งาน
  └── ไม่ครบ → แจ้งเวลาที่เหลือ
        ↓
input .ach
  ↓
แสดงรายการไอเท็มใน Auction House
        ↓
input .ach sell [item_id] [price]
  ↓
ตรวจสอบว่าผู้ใช้งานมีไอเท็มที่ต้องการขาย
  ├── มี → เพิ่มไอเท็มลงใน Auction House และลบออกจากกระเป๋าผู้ใช้งาน
  └── ไม่มี → แจ้งเตือนและหยุดการทำงาน
        ↓
input .ach buy [item_id]
  ↓
ตรวจสอบว่าผู้ใช้งานมีเงินเพียงพอในการซื้อ
  ├── มี → หักเงินจากผู้ซื้อ, เพิ่มเงินให้ผู้ขาย, และโอนไอเท็มไปยังกระเป๋าผู้ซื้อ
  └── ไม่มี → แจ้งเตือนและหยุดการทำงาน
        ↓
[จบ]
***************************************************************************************

addwall
[เริ่ม]
  ↓
input .addwall [type] [user_id/@user] [amount]
  ├── หากไม่ใช่ Admin → แจ้งเตือนและหยุดการทำงาน
  └── หากเป็น Admin → ดำเนินการต่อ
        ↓
ตรวจสอบ type (b = Balance, k = Karma)
  ├── หาก type เป็น b → เพิ่มจำนวนเงินให้ผู้ใช้งาน
  └── หาก type เป็น k → เพิ่มค่า Karma ให้ผู้ใช้งาน
        ↓
ตรวจสอบ user_id หรือ @user
  ├── หากเป็น @user → ใช้ user_id จากการแท็ก
  └── หากเป็น user_id → ใช้ user_id โดยตรง
        ↓
บันทึกข้อมูลในฐานข้อมูล
  ↓
ส่ง DM แจ้งเตือนผู้ใช้งาน
  ↓
แจ้งผลลัพธ์ในแชแนล
  ↓
[จบ]
***************************************************************************************

farm

- เริ่มต้นทุกคนจะมี จำนวนที่ดิน 1 (slot) ซื้อเพิ่มได้ และ ข้าว 1 ต้น
- สามารถ ซื้อของได้ที่ .shop

[เริ่ม]
  ↓
คำสั่ง: .farm plant [crop] (ปลูกผัก)
  ├── หากไม่มีที่ดิน → แจ้งเตือนและหยุดการทำงาน
  └── หากมีที่ดิน → ดำเนินการปลูกผัก
        ↓
รอเวลาเก็บเกี่ยว (เช่น 10 นาที)
  ↓
คำสั่ง: .farm harvest (เก็บเกี่ยว)
  ├── หากยังไม่ถึงเวลา → แจ้งเตือนและหยุดการทำงาน
  └── หากถึงเวลา → เก็บผลผลิต
        ↓
คำสั่ง: .farm sell [crop] [amount] (ขายผัก)
  ├── หากไม่มีผลผลิต → แจ้งเตือนและหยุดการทำงาน
  └── หากมีผลผลิต → ขายและรับเงิน
        ↓
[จบ]